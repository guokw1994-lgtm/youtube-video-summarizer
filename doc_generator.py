from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from datetime import datetime

def create_youtube_summary_doc(video_title, video_url, video_duration, publisher, summary_text, keywords, original_transcript=None, output_filename="youtube_summary.docx"):
    """
    Generates a Word document summarizing a YouTube video.

    Args:
        video_title (str): The title of the YouTube video.
        video_url (str): The URL of the YouTube video.
        video_duration (str): The duration of the video (e.g., "10 minutes 30 seconds").
        publisher (str): The publisher/channel name of the video.
        summary_text (str): The summary generated by the large language model.
        keywords (list): A list of keywords or main topics from the summary.
        original_transcript (str, optional): The full original transcript of the video. Defaults to None.
        output_filename (str, optional): The name of the output Word document file. Defaults to "youtube_summary.docx".
    """
    document = Document()

    # --- Title Page ---
    document.add_heading('YouTube Video Summary Report', level=0)
    document.add_paragraph(video_title, style='Title')
    document.add_paragraph(f"Summary Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    document.add_page_break()

    # --- Introduction ---
    document.add_heading('1. Introduction', level=1)
    document.add_paragraph(
        "This document provides a comprehensive summary of the YouTube video linked below, "
        "generated using advanced large language models. The aim is to offer a concise "
        "overview of the video's content, key takeaways, and relevant information."
    )

    # --- Video Information ---
    document.add_heading('2. Video Information', level=1)
    document.add_paragraph(f"Video Title: {video_title}")
    document.add_paragraph(f"YouTube Link: {video_url}")
    document.add_paragraph(f"Duration: {video_duration}")
    document.add_paragraph(f"Publisher/Channel: {publisher}")

    # --- Summary Content ---
    document.add_heading('3. Summary Content', level=1)
    document.add_paragraph(summary_text)

    # --- Keywords/Themes ---
    document.add_heading('4. Keywords/Themes', level=1)
    if keywords:
        for keyword in keywords:
            document.add_paragraph(f"- {keyword}", style='List Bullet')
    else:
        document.add_paragraph("No specific keywords identified.")

    # --- Original Transcript (Optional) ---
    if original_transcript:
        document.add_heading('5. Original Video Transcript', level=1)
        document.add_paragraph(
            "Due to potential length, the full transcript is included below. "
            "Alternatively, you can refer to the YouTube video link for the official captions."
        )
        document.add_paragraph(original_transcript)

    document.save(output_filename)
    return output_filename

if __name__ == '__main__':
    # Example Usage:
    example_video_title = "The Future of AI in Healthcare"
    example_video_url = "https://www.youtube.com/watch?v=example_id"
    example_video_duration = "15 minutes 20 seconds"
    example_publisher = "Tech Insights Channel"
    example_summary_text = (
        "This video discusses the transformative impact of Artificial Intelligence on the healthcare sector. "
        "It covers various applications such as diagnostic imaging, personalized medicine, drug discovery, "
        "and administrative efficiency. Experts highlight the ethical considerations and challenges, "
        "emphasizing the need for robust regulatory frameworks and data privacy. The future outlook "
        "suggests a collaborative role for AI, augmenting human capabilities rather than replacing them."
    )
    example_keywords = ["AI in Healthcare", "Diagnostic Imaging", "Personalized Medicine", "Drug Discovery", "Ethics of AI"]
    example_transcript = "(Video starts) Welcome to Tech Insights. Today we delve into the fascinating world of AI in healthcare... (transcript continues)"

    print(f"Generating document for '{example_video_title}'...")
    generated_file = create_youtube_summary_doc(
        example_video_title,
        example_video_url,
        example_video_duration,
        example_publisher,
        example_summary_text,
        example_keywords,
        example_transcript,
        "example_youtube_summary.docx"
    )
    print(f"Document generated: {generated_file}")

    # Example without transcript
    print(f"Generating document without transcript...")
    generated_file_no_transcript = create_youtube_summary_doc(
        example_video_title,
        example_video_url,
        example_video_duration,
        example_publisher,
        example_summary_text,
        example_keywords,
        output_filename="example_youtube_summary_no_transcript.docx"
    )
    print(f"Document generated: {generated_file_no_transcript}")